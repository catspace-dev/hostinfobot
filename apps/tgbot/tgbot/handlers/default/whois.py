from typing import Optional

from whois import whois, parser
from aiogram.types import Message
from dataclasses import dataclass
from whois_vu.api import WhoisSource
from whois_vu.errors import IncorrectZone, QueryNotMatchRegexp

from ..whois_zones import ZONES
from ..base import SimpleCommandHandler
from ..errors import NotEnoughArgs, LocalhostForbidden
from ...middlewares.throttling import rate_limit

whois_help_message = """
‚ùì –í–µ—Ä–Ω—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ.

 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/whois <–¥–æ–º–µ–Ω>`
"""

no_domain_text = """
‚ùó–ù–µ —É–∫–∞–∑–∞–Ω –¥–æ–º–µ–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π/–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–º–µ–Ω.

–ù–∞–ø–∏—à–∏—Ç–µ /whois —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É.
"""

incorrect_domain = "‚ùó –î–æ–º–µ–Ω {domain} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ /whois –∏–ª–∏ –µ–≥–æ –ø–æ–ø—Ä–æ—Å—Ç—É –Ω–µ " \
                   "—Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n" \
                   "üìå –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, " \
                   "—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å " \
                   "–Ω–∞–º –æ –Ω–µ–π —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º. –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ /start."


@dataclass
class DomainAttrClass:
    icon: str
    name: str
    attr: str


# DOMAIN_ATTR_CLASSES order matters!
DOMAIN_ATTR_CLASSES = [
    DomainAttrClass("üë§", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "registrar"),
    DomainAttrClass("üìÖ", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "creation_date"),
    DomainAttrClass("üìÖ", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "expiration_date"),
    DomainAttrClass("üìñ", "–ê–¥—Ä–µ—Å", "address"),
    DomainAttrClass("üèò", "–ì–æ—Ä–æ–¥", "city"),
    DomainAttrClass("üèò", "–°—Ç—Ä–∞–Ω–∞", "country"),
    DomainAttrClass("üí¨", "–ò–º—è", "name"),
    DomainAttrClass("üíº", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "org"),
    DomainAttrClass("üí¨", "Zipcode", "zipcode"),
    DomainAttrClass("‚úâ", "–ü–æ—á—Ç–∞", "emails"),
    DomainAttrClass("üìå", "NS", "name_servers"),
    DomainAttrClass("üîê", "DNSSec", "dnssec"),
]


def whois_request(domain: str) -> parser.WhoisEntry:
    domain_info = whois(domain)
    if domain_info.get("domain_name") is None:
        splitted = domain.split(".")
        ws = WhoisSource().get(domain)
        if zone_class := ZONES.get(splitted[-1], None):
            domain_info = zone_class(domain, ws.whois)
        else:
            domain_info = parser.WhoisEntry.load(domain, ws.whois)
    return domain_info


def create_whois_message(domain: str) -> str:
    try:
        domain_info = whois_request(domain)
    except parser.PywhoisError:
        return f"‚ùó –î–æ–º–µ–Ω {domain} —Å–≤–æ–±–æ–¥–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω."
    except IncorrectZone:
        return incorrect_domain.format(domain=domain)
    except QueryNotMatchRegexp:
        return incorrect_domain.format(domain=domain)
    domain_name = domain_info.get("domain_name")
    if not domain_name:
        return incorrect_domain.format(domain=domain)
    if isinstance(domain_name, list):
        domain_name = domain_name[0]
    message = f"\nüìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ {domain_name.lower()}:"

    for i, domain_attr in enumerate(DOMAIN_ATTR_CLASSES):
        # for pretty printing, DOMAIN_ATTR_CLASSES order matters!
        if i in [2, 10]:
            message += "\n"
        resp = format_domain_item(
            domain_attr.icon, domain_attr.name, domain_info.get(domain_attr.attr)
        )
        if resp:
            message += resp

    return message


def format_domain_item(icon, item_name, items) -> Optional[str]:
    if not items:
        return
    if isinstance(items, list):
        items = map(str, items)  # fix datetime bug
        message = f"\n{icon} {item_name}:\n"
        message += str.join("\n", [f" * <code>{ns}</code>" for ns in list(set(map(str.lower, items)))])
    else:
        message = f"\n{icon} {item_name}: {items}"
    return message


class WhoisCommandHandler(SimpleCommandHandler):
    help_message = whois_help_message

    def __init__(self):
        super().__init__()

    @rate_limit
    async def handler(self, message: Message):
        try:
            args = self.process_args(message.text)
        except NotEnoughArgs:
            await message.answer(no_domain_text, parse_mode='Markdown')
        except LocalhostForbidden:
            await message.answer(self.localhost_forbidden_message, parse_mode='Markdown')
        else:
            await message.answer(create_whois_message(args[0]), parse_mode='html')

    def process_args(self, text: str) -> list:
        args = text.split()
        if len(args) == 1:
            raise NotEnoughArgs
        if len(args) >= 2:
            host = args[1]
            self.validate_target(host)
            return [host]  # only domain name

    async def prepare_message(self) -> str:
        pass
